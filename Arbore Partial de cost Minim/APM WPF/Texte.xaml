<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">


    <FlowDocument x:Key="Kruskal_Teorie"  >
        <Paragraph FontWeight="Bold" FontSize="18" >
            <Paragraph.Foreground>
                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                    <GradientStop Color="Black" Offset="0"/>
                    <GradientStop Color="#FF14085F" Offset="1"/>
                </LinearGradientBrush>
            </Paragraph.Foreground> Algoritmul lui Kruskal
        </Paragraph>
        <Paragraph>Algoritmul funcționează în felul următor:</Paragraph>
        <List>
            <ListItem>
                <Paragraph>
                    creează o pădure F (o mulțime de arbori), unde fiecare vârf din graf este un arbore separat
                </Paragraph>
            </ListItem>
            <ListItem>
                <Paragraph>
                    creează o mulțime S care conține toate muchiile din graf
                </Paragraph>
            </ListItem>
            <ListItem>
                <Paragraph>atât timp cât S este nevidă</Paragraph>

                <List>
                    <ListItem>
                        <Paragraph>
                            elimină o muchie de cost minim din S
                        </Paragraph>
                    </ListItem>
                    <ListItem>
                        <Paragraph>dacă acea muchie conectează doi arbori distincți, atunci adaugă muchia în pădure, combinând cei doi arbori într-unul singur</Paragraph>
                    </ListItem>
                    <ListItem>
                        <Paragraph>altfel, ignoră muchia</Paragraph>
                    </ListItem>
                </List>
            </ListItem>
        </List>
        <Paragraph>La sfârșitul algoritmului, pădurea are doar o componentă care reprezintă un arbore parțial de cost minim al grafului.</Paragraph>
        <Paragraph>Acest algoritm a fost scris de Joseph Kruskal, în 1956.</Paragraph>

        <Paragraph></Paragraph>
    </FlowDocument>

    <FlowDocument x:Key="Enunt">
        <Paragraph>Se da un graf conex neorientat G cu N noduri si M muchii, fiecare muchie avand asociat un cost.</Paragraph>
        <Paragraph>Se cere sa se determine un subgraf care cuprinde toate nodurile si o parte din muchii, astfel incat subgraful determinat sa aiba structura de arbore si suma costurilor muchiilor care il formeaza sa fie minim posibila.</Paragraph>
        <Paragraph>Subgraful cu proprietatile de mai sus se va numi arbore partial de cost minim pentru graful dat.</Paragraph>
    </FlowDocument>

    <FlowDocument x:Key="Prim_Teorie"  >
        <Paragraph FontWeight="Bold" FontSize="18" >
            <Paragraph.Foreground>
                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                    <GradientStop Color="Black" Offset="0"/>
                    <GradientStop Color="#FF14085F" Offset="1"/>
                </LinearGradientBrush>
            </Paragraph.Foreground> Algoritmul lui Prim
        </Paragraph>
        
        <Paragraph>Algoritmul lui Prim folosește tot o abordare greedy, de data aceasta pe noduri.</Paragraph>
        <Paragraph>Pentru aceasta este folosită structura de date MINHEAP, prin care se execută selecarea în timp optim a nodului din care există muchia cu cel mai mic cost către arborele parțial curent.</Paragraph>
        <Paragraph>Acesta funcționează în felul următor:</Paragraph>
     
        <List>
            <ListItem>
                <Paragraph>
                    Intrare: Un graf conex ponderat cu nodurile V și muchiile E.
                </Paragraph>
            </ListItem>
            <ListItem>
                <Paragraph>
                    Initializare: Vnou = {x}, unde x este un nod arbitrar (punct de plecare) din V, Enou= {}
                </Paragraph>
            </ListItem>
            <ListItem>
                <Paragraph>repetă până când Vnou=V:</Paragraph>

                <List>
                    <ListItem>
                        <Paragraph>
                            Alege muchia (u,v) din E de cost minim astfel încât u este în Vnou și v nu e (dacă există mai multe astfel de muchii, se alege arbitrar)
                        </Paragraph>
                    </ListItem>
                    <ListItem>
                        <Paragraph>Se adaugă v la Vnou, (u,v) la Enou</Paragraph>
                    </ListItem>
                </List>
            </ListItem>
            <ListItem>
                <Paragraph>
                    Ieșire: Vnou și Enou descriu arborele parțial de cost minim.
                </Paragraph>
            </ListItem>
        </List>

        <Paragraph>Algoritmul a fost descoperit în 1930 de către matematicianul Vojtěch Jarník și apoi, independent, de informaticienii Robert C. Prim în 1957 și redescoperit de Edsger Dijkstra în 1959. De aceea mai este numit Algoritmul DJP, algoritmul Jarník sau algoritmul Prim-Jarník.</Paragraph>

        <Paragraph></Paragraph>
    </FlowDocument>

    <FlowDocument x:Key="Disjunct">
        <Paragraph FontWeight="Bold" FontSize="18" >
            <Paragraph.Foreground>
                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                    <GradientStop Color="Black" Offset="0"/>
                    <GradientStop Color="#FF14085F" Offset="1"/>
                </LinearGradientBrush>
            </Paragraph.Foreground> Păduri de mulțimi disjunte
        </Paragraph>
        <Paragraph>Această structură de date rezolvă eficient următoarele probleme:</Paragraph>
        <List>
            <ListItem>
                <Paragraph>
                    În ce mulțime se află nodul x? Fac nodurile x și y parte din aceeași mulțime?
                </Paragraph>
            </ListItem>
            <ListItem>
                <Paragraph>
                    Reuniunea a două mulțimi.
                </Paragraph>
            </ListItem>
        </List>
        <Paragraph>Arborii vor fi reprezentați printr-un vector de tați.</Paragraph>
        <Paragraph>Pentru a verifica dacă două elemente fac parte din aceeași mulțime, verificăm dacă rădăcinile lor sunt identice.</Paragraph>
        <Paragraph>Obținerea rădăcinii elementului x se face prin iterarea succesivă a tatălui nodului curent, apoi a tatălui acestuia și așa mai departe, până ajung la rădăcină</Paragraph>
        <Paragraph>Această abordare are complexitatea O(h), unde h este nivelul la care se afla x in arbore.</Paragraph>
        <Paragraph>Vom face o imbunătățire, care se bazează pe faptul ca pe noi ne interesează doar rădăcina arborelui: Vom compresa drumurile</Paragraph>
        <Paragraph>Compresia drumurilor constă în legarea fiilor direct de rădăcină după fiecare parcurgere a acestora.</Paragraph>
        <Paragraph>Pentru reuniunea a două mulțimi vom adăuga rădăcina unuia dintre arbori ca fiu al rădăcinii celuilalt.</Paragraph>
    </FlowDocument>

</ResourceDictionary>